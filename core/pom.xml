<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- PMS consists of two major parts: PMS itself and the third party software 
		needed to run it. While PMS itself is 100% pure Java, some of the third party 
		software is not. This means building a platform specific distribution boils 
		down to first building the pms.jar and then assembling all application resources. 
		Note that Maven 3 does not automatically install all dependencies, unlike 
		Maven 2. To install all dependencies to your local repository, run the following 
		commands: mvn com.savage7.maven.plugins:maven-external-dependency-plugin:resolve-external 
		mvn com.savage7.maven.plugins:maven-external-dependency-plugin:install-external 
		To build PMS, do: mvn clean package After building, the "target" directory 
		will contain the binary. To generate a full source code report, do: mvn site 
		After generating, the "target/site" directory will contain the reports. -->

	<modelVersion>4.0.0</modelVersion>

	<artifactId>pms-core</artifactId>
	<name>PMS Core</name>
	<packaging>jar</packaging>
	<description>The core of pms-mlx includes the business code as well as the GUI</description>

	<parent>
		<groupId>github.com.taconaut</groupId>
		<artifactId>pms</artifactId>
		<version>1.90.2-mlx-1.1.1-SNAPSHOT</version>
	</parent>

	<properties>
		
		<!-- Used library versions -->
		<!-- JNA 3.4.0 solves issue #1152, but causes a bug in Windows. The version 
			is therefore overruled in the Windows profile. This property should be removed 
			when Windows can use the same version. -->
		<jna-version-posix>3.4.0</jna-version-posix>
		<jna-version-windows>3.2.5</jna-version-windows>

		<cuelib-version>1.2.1-2008-06-13</cuelib-version>
		<junrar-version>0.7</junrar-version>
		<mediautil-version>1.0</mediautil-version>
		<jcalendar-version>1.1.1</jcalendar-version>
		<slf4j-version>1.7.5</slf4j-version>
		<logback-version>1.0.13</logback-version>
		<bsh-core-version>2.0b4</bsh-core-version>
		<commons-codec-version>1.8</commons-codec-version>
		<commons-collections-version>3.2.2</commons-collections-version>
		<commons-configuration-version>1.9</commons-configuration-version>
		<commons-httpclient-version>3.1</commons-httpclient-version>
		<commons-io-version>2.4</commons-io-version>
		<commons-lang3-version>3.1</commons-lang3-version>
		<h2-version>1.4.182</h2-version>
		<maven-artifact-version>3.1.0</maven-artifact-version>
		<sanselan-version>0.97-incubator</sanselan-version>
		<gson-version>2.2.4</gson-version>
		<netty-version>3.2.9.Final</netty-version>
		<rome-version>1.0.0</rome-version>
		<thumbnailator-version>0.4.5</thumbnailator-version>
		<jai-imageio-core-standalone-version>1.2-pre-dr-b04-2011-07-04</jai-imageio-core-standalone-version>
		<jaudiotagger-version>2.0.3</jaudiotagger-version>
		<juniversalchardet-version>1.0.3</juniversalchardet-version>
		<junit-version>4.11</junit-version>
		<fest-assert-version>1.4</fest-assert-version>
		<jmte-version>3.0</jmte-version>
		<jnotify-version>0.94</jnotify-version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- External files properties -->
		<external-resources.directory>${project.basedir}/src/main/external-resources</external-resources.directory>
		<external-resources.transcode-tools.directory>${external-resources.directory}/transcode-tools</external-resources.transcode-tools.directory>
		<target.transcode-tools.directory>${project.build.directory}/bin</target.transcode-tools.directory>
	</properties>

	<repositories>
		<!-- Sonatype -->
		<repository>
			<id>sonatype.org</id>
			<name>Sonatype Repository</name>
			<url>https://oss.sonatype.org/content/groups/public</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>

		<!-- Java.net -->
		<repository>
			<id>java.net</id>
			<name>Java.net Repository</name>
			<url>http://download.java.net/maven/2/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- netty -->
		<repository>
			<id>jboss</id>
			<url>http://repository.jboss.org/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- GSON -->
		<repository>
			<id>google-gson</id>
			<name>google-gson</name>
			<url>https://google-gson.googlecode.com/svn/mavenrepo/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- JBoss.org repository -->
		<repository>
			<id>jboss.releases</id>
			<name>JBoss releases</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- for jai-imageio-core-standalone, which is used by Thumbnailator -->
		<repository>
			<releases />
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>mygrid-repository</id>
			<name>myGrid Repository</name>
			<url>http://www.mygrid.org.uk/maven/repository</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>${bsh-core-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>${commons-codec-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>${commons-collections-version}</version>
		</dependency>

		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>${commons-configuration-version}</version>
			<exclusions>
				<!-- no need for commons-logging, as jcl-over-slf4j provides the impl -->
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>${commons-httpclient-version}</version>
			<exclusions>
				<!-- no need for commons-logging, as jcl-over-slf4j provides the impl -->
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3-version}</version>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2-version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-artifact</artifactId>
			<version>${maven-artifact-version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.sanselan</groupId>
			<artifactId>sanselan</artifactId>
			<version>${sanselan-version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j-version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>${gson-version}</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.netty</groupId>
			<artifactId>netty</artifactId>
			<version>${netty-version}</version>
		</dependency>

		<dependency>
			<groupId>net.java.dev.rome</groupId>
			<artifactId>rome</artifactId>
			<version>${rome-version}</version>
		</dependency>

		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>${thumbnailator-version}</version>
		</dependency>

		<!--
			this is not used on its own, but rather provides
			ImageReader subclasses that make support for additional
			formats (e.g. TIFF) available to the ImageIO API, and thus
			to Thumbnailator (our built-in image thumbnailer).

			XXX be careful upgrading this. this version is redistributable;
			other versions may not be:

			https://code.google.com/p/thumbnailator/issues/detail?id=32
			https://github.com/stain/jai-imageio-core
			http://stackoverflow.com/questions/1209583/using-java-advanced-imaging-with-maven
		-->
		<dependency>
			<groupId>net.java.dev.jai-imageio</groupId>
			<artifactId>jai-imageio-core-standalone</artifactId>
			<version>${jai-imageio-core-standalone-version}</version>
		</dependency>

		<dependency>
			<groupId>org</groupId>
			<artifactId>jaudiotagger</artifactId>
			<version>${jaudiotagger-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>binding</artifactId>
			<version>${jgoodies-binding-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: http://flib.sourceforge.net/JCalendar/doc/index.html -->
		<dependency>
			<groupId>org.freixas</groupId>
			<artifactId>jcalendar</artifactId>
			<version>${jcalendar-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-common</artifactId>
			<version>${jgoodies-common-version}</version>
		</dependency>

		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-forms</artifactId>
			<version>${jgoodies-forms-version}</version>
		</dependency>


		<dependency>
			<groupId>com.jgoodies</groupId>
			<artifactId>jgoodies-looks</artifactId>
			<version>${jgoodies-looks-version}</version>
		</dependency>

		<dependency>
			<groupId>com.github.junrar</groupId>
			<artifactId>junrar</artifactId>
			<version>${junrar-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: https://code.google.com/p/cuelib/ -->
		<dependency>
			<groupId>jwbroek.cuelib</groupId>
			<artifactId>cuelib</artifactId>
			<version>${cuelib-version}</version>
		</dependency>

		<!-- XXX: not Mavenized: http://sourceforge.net/projects/mediachest/ -->
		<dependency>
			<groupId>mediautil</groupId>
			<artifactId>mediautil</artifactId>
			<version>${mediautil-version}</version>
		</dependency>

		<dependency>
			<groupId>xmlwise</groupId>
			<artifactId>xmlwise</artifactId>
			<version>${xmlwise-version}</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.juniversalchardet</groupId>
			<artifactId>juniversalchardet</artifactId>
			<version>${juniversalchardet-version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.easytesting</groupId>
			<artifactId>fest-assert</artifactId>
			<version>${fest-assert-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.floreysoft</groupId>
			<artifactId>jmte</artifactId>
			<version>${jmte-version}</version>
		</dependency>
		
		<dependency>
			<groupId>jnotify</groupId>
			<artifactId>jnotify</artifactId>
			<version>${jnotify-version}</version>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>assembly:assembly</defaultGoal>

		<resources>
			<!-- squashed bug: this needs to be defined explicitly if a <resources>...</resources> 
				section is used -->

			<resource>
				<directory>src/main/resources</directory>
				<!-- By default Maven packages resources in the top-level of the jar. 
					For compatibility with trunk PMS, we preserve that destination. If this is 
					ever changed to the Maven default, a handful of files will need to be changed 
					to reference "/resource.name" rather than "/resources/resource.name" -->
				<targetPath>resources</targetPath>
				<excludes>
					<exclude>project.properties</exclude>
				</excludes>

				<!-- Avoid inadvertently filtering binaries -->
				<filtering>false</filtering>
			</resource>

			<resource>
				<directory>src/main/resources</directory>
				<targetPath>resources</targetPath>
				<includes>
					<include>project.properties</include>
				</includes>

				<!-- Filter to replace Maven properties -->
				<filtering>true</filtering>
			</resource>

			<!-- There are (or were) reportedly issues with Eclipse's "Externalize 
				Strings" wizard if these aren't in the source tree, so keep them here for 
				now, even though it's Mavenly-incorrect. -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>

			<!-- Copy and filter the NSIS header file to replace Maven properties -->
			<resource>
				<directory>src/main/external-resources/nsis</directory>
				<includes>
					<include>extra.nsh</include>
				</includes>
				<filtering>true</filtering>
				<targetPath>..</targetPath>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>project.properties</include>
				</includes>
				<targetPath>resources</targetPath>

				<!-- Enable the use of Maven properties -->
				<filtering>true</filtering>
			</testResource>
		  
            <!--*.srt files to test charset detection-->
			<testResource>
				<directory>src/test/resources/net/pms/util</directory>
				<includes>
					<include>*.srt</include>
				</includes>
				<targetPath>net/pms/util</targetPath>
			</testResource>
		</testResources>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<!-- Force language because JUnit tests depend on english language  strings -->
						<argLine>-Duser.language=en</argLine>
					</configuration>
					<version>${maven-surefire-plugin-version}</version>
				</plugin>
				
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											pl.project13.maven
										</groupId>
										<artifactId>
											git-commit-id-plugin
										</artifactId>
										<versionRange>
											[1.9,)
										</versionRange>
										<goals>
											<goal>revision</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>

            <!-- This plugin will take care of installing the external dependencies (see root POM for details) -->
			<plugin>
				<groupId>com.savage7.maven.plugins</groupId>
				<artifactId>maven-external-dependency-plugin</artifactId>
				<version>${maven-external-dependency-plugin-version}</version>
				<configuration>
					<stagingDirectory>${project.build.directory}/dependencies/</stagingDirectory>
					<createChecksum>true</createChecksum>
					<skipChecksumVerification>false</skipChecksumVerification>
					<force>false</force>

					<artifactItems>

						<artifactItem>
							<groupId>jwbroek.cuelib</groupId>
							<artifactId>cuelib</artifactId>
							<version>${cuelib-version}</version>
							<packaging>jar</packaging>
							<downloadUrl>http://cuelib.googlecode.com/files/cuelib-${cuelib-version}.jar</downloadUrl>
							<checksum>d03b6b960b3b83a2a419e8b5f07b6ba4bd18387b</checksum>
						</artifactItem>

						<artifactItem>
							<groupId>mediautil</groupId>
							<artifactId>mediautil</artifactId>
							<version>${mediautil-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://downloads.sourceforge.net/project/mediachest/MediaUtil/Version%201.0/mediautil-1.zip</downloadUrl>
							<checksum>aa7ae51bb24a9268a8e57c6afe478c4293f84fda</checksum>
							<extractFile>mediautil-${mediautil-version}/mediautil-${mediautil-version}.jar</extractFile>
							<extractFileChecksum>e843cd55def75dce57123c79b7f36caca4841466</extractFileChecksum>
						</artifactItem>

						<artifactItem>
							<groupId>org.freixas</groupId>
							<artifactId>jcalendar</artifactId>
							<version>${jcalendar-version}</version>
							<packaging>jar</packaging>
							<downloadUrl>http://sourceforge.net/projects/flib/files/flib/FLib%201.1.1/jcalendar.jar</downloadUrl>
							<checksum>83eb4b1a4823daf3b5bea61958cf6097930f74fb</checksum>
						</artifactItem>

						<artifactItem>
							<groupId>jnotify</groupId>
							<artifactId>jnotify</artifactId>
							<version>${jnotify-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://sourceforge.net/projects/jnotify/files/jnotify/jnotify-${jnotify-version}/jnotify-lib-${jnotify-version}.zip</downloadUrl>
							<checksum>7f81f3429b2fe061f75ed870ca749109</checksum>
							<extractFile>jnotify-${jnotify-version}.jar</extractFile>
						</artifactItem>

					</artifactItems>

				</configuration>
			</plugin>
			
			<!-- Plugin to add git commit information properties. These are used in 
				the project.properties files. See: https://github.com/ktoso/maven-git-commit-id-plugin -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>${git-commit-id-plugin-version}</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyy-MM-dd</dateFormat>
					<verbose>false</verbose>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin-version}</version>
				<configuration>
					<source>${targetJdk}</source>
					<target>${targetJdk}</target>
					<fork>false</fork>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${maven-eclipse-plugin-version}</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<wtpversion>1.5</wtpversion>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-idea-plugin</artifactId>
				<version>${maven-idea-plugin-version}</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
					<dependenciesAsLibraries>true</dependenciesAsLibraries>
					<useFullNames>false</useFullNames>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${maven-site-plugin-version}</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.doxia</groupId>
						<artifactId>doxia-module-docbook-simple</artifactId>
						<version>${doxia-module-docbook-simple-version}</version>
					</dependency>
				</dependencies>

				<configuration>
					<reportPlugins>

						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-project-info-reports-plugin</artifactId>
							<version>${maven-project-info-reports-plugin-version}</version>
							<reports>
								<report>index</report>
								<report>dependencies</report>
								<report>dependency-convergence</report>
								<report>dependency-management</report>
								<report>plugins</report>
							</reports>
						</plugin>

						<!-- PMS tests report -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-report-plugin</artifactId>
							<version>${maven-surefire-plugin-version}</version>
							<configuration>
								<showSuccess>false</showSuccess>
							</configuration>
						</plugin>

						<!-- Javadoc -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<version>${maven-javadoc-plugin-version}</version>
							<configuration>
								<quiet>true</quiet>
								<tags>
									<tag>
										<name>todo</name>
										<placement>a</placement>
										<head>To Do:</head>
									</tag>
									<tag>
										<name>review</name>
										<placement>a</placement>
										<head>Review:</head>
									</tag>
								</tags>
								<detectJavaApiLink>false</detectJavaApiLink>
								<links>
									<link>http://download.oracle.com/javase/6/docs/api/</link>
								</links>
								<!-- Doclet to generate class diagrams inside Javadoc. Requires the 
									installation of Graphviz (http://www.graphviz.org/) -->
								<doclet>org.jboss.apiviz.APIviz</doclet>
								<docletArtifact>
									<groupId>org.jboss.apiviz</groupId>
									<artifactId>apiviz</artifactId>
									<version>${apiviz-version}</version>
								</docletArtifact>
								<useStandardDocletOptions>true</useStandardDocletOptions>
							</configuration>
						</plugin>

						<!-- Class dependency report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>jdepend-maven-plugin</artifactId>
							<version>${jdepend-maven-plugin-version}</version>
						</plugin>

						<!-- Findbugs report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>findbugs-maven-plugin</artifactId>
							<version>${findbugs-maven-plugin-version}</version>
						</plugin>

						<!-- Checkstyle report will go out of memory because of the huge amount 
							of issues it finds(!) <plugin> <groupId>org.apache.maven.plugins</groupId> 
							<artifactId>maven-checkstyle-plugin</artifactId> <version>2.8</version> </plugin> -->

						<!-- Cobertura Test Coverage report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>cobertura-maven-plugin</artifactId>
							<version>${cobertura-maven-plugin-version}</version>
						</plugin>

						<!-- PMD and CPD code analysis report -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-pmd-plugin</artifactId>
							<version>${maven-pmd-plugin-version}</version>
							<configuration>
								<linkXref>false</linkXref>
								<sourceEncoding>utf-8</sourceEncoding>
								<minimumTokens>100</minimumTokens>
								<targetJdk>${targetJdk}</targetJdk>
							</configuration>
						</plugin>

						<!-- L10n internationalization report -->
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>l10n-maven-plugin</artifactId>
							<version>${l10n-maven-plugin-version}</version>
							<configuration>
								<locales>
									<locale>de</locale>
									<locale>bg</locale>
									<locale>br</locale>
									<locale>ca</locale>
									<locale>cz</locale>
									<locale>da</locale>
									<locale>de</locale>
									<locale>el</locale>
									<locale>es</locale>
									<locale>fi</locale>
									<locale>fr</locale>
									<locale>is</locale>
									<locale>it</locale>
									<locale>ja</locale>
									<locale>ko</locale>
									<locale>nl</locale>
									<locale>no</locale>
									<locale>pl</locale>
									<locale>pt</locale>
									<locale>ro</locale>
									<locale>ru</locale>
									<locale>sl</locale>
									<locale>sv</locale>
									<locale>zhs</locale>
									<locale>zht</locale>
								</locales>
							</configuration>
						</plugin>

					</reportPlugins>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<!-- Windows profile: takes care of building the final package for Microsoft Windows -->
		<profile>
			<id>windows</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>

			<pluginRepositories>
				<pluginRepository>
					<id>Codehaus Snapshots</id>
					<url>http://nexus.codehaus.org/snapshots/</url>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
					<releases>
						<enabled>true</enabled>
					</releases>
				</pluginRepository>
			</pluginRepositories>

			<dependencies>
				<dependency>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna</artifactId>
					<version>${jna-version-windows}</version>
				</dependency>
			</dependencies>

			<build>
				<plugins>

					<!-- Plugin to move the pms-x.x.x-jar-with-dependencies.jar to pms.jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>process-resources-windows</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the download folders exist. -->
										<mkdir dir="${external-resources.transcode-tools.directory}/win32" />

										<!-- Download and unpack binaries. -->
										<get src="${transcode-tools.download.url}/win32/${transcode-tools.windows.x86.filename}" dest="${external-resources.transcode-tools.directory}/${transcode-tools.windows.x86.filename}" usetimestamp="true" />

										<untar src="${external-resources.transcode-tools.directory}/${transcode-tools.windows.x86.filename}" dest="${external-resources.transcode-tools.directory}/win32" compression="gzip" stripAbsolutePathSpec="true" overwrite="true" failOnEmptyArchive="true">
										</untar>
									</target>
								</configuration>
							</execution>
							<execution>
								<id>copy-windows-dll</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- MediaInfo and jnotify libraries need to be in the standard library path to be found -->
										<copy file="${external-resources.transcode-tools.directory}/win32/MediaInfo.dll" todir="${project.basedir}" overwrite="true" verbose="true" />
										<copy file="${external-resources.transcode-tools.directory}/win32/MediaInfo64.dll" todir="${project.basedir}" overwrite="true" verbose="true" />
										<copy file="${external-resources.transcode-tools.directory}/win32/jnotify.dll" todir="${project.basedir}" overwrite="true" verbose="true" />
										<copy file="${external-resources.transcode-tools.directory}/win32/jnotify_64bit.dll" todir="${project.basedir}" overwrite="true" verbose="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


		<!-- Linux profile: takes care of building the final package for Linux -->
		<profile>
			<id>linux</id>
			<!--
				 this setting does the right thing on Linux
				 and is needed for the Hudson profile to work
			 -->
			<activation>
				<activeByDefault>true</activeByDefault>
				<os>
					<family>unix</family>
					<name>Linux</name>
				</os>
			</activation>

			<dependencies>
				<dependency>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna</artifactId>
					<version>${jna-version-posix}</version>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<!-- Download external resources. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>download-external-resources-linux</id>
								<phase>process-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<!-- Make sure the download folder exists. -->
										<mkdir dir="${external-resources.transcode-tools.directory}/linux" />

										<!-- Download and unpack binaries. -->
										<get src="${transcode-tools.download.url}/linux/${transcode-tools.linux.filename}" dest="${external-resources.transcode-tools.directory}/${transcode-tools.linux.filename}" usetimestamp="true" />

										<untar src="${external-resources.transcode-tools.directory}/${transcode-tools.linux.filename}" dest="${external-resources.transcode-tools.directory}/linux" compression="gzip" stripAbsolutePathSpec="true" overwrite="true" failOnEmptyArchive="true" />
										
										
										<!-- Make all downloaded binaries executable -->
										<chmod dir="${external-resources.transcode-tools.directory}/linux" perm="a+x" includes="*" excludes="libjnotify.so,libjnotify-x86.so" />
										
										<!-- Copy the jnotify library files (x86 and x64) to the standard library path -->
										<copy file="${external-resources.transcode-tools.directory}/linux/libjnotify.so" todir="${project.basedir}" overwrite="true" verbose="true" />
										<copy file="${external-resources.transcode-tools.directory}/linux/libjnotify-x86.so" todir="${project.basedir}" overwrite="true" verbose="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


		<!-- Mac OSX profile: takes care of building the final package for Mac OSX -->
		<profile>
			<id>osx</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<family>mac</family>
				</os>
			</activation>

			<dependencies>
				<dependency>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna</artifactId>
					<version>${jna-version-posix}</version>
				</dependency>
			</dependencies>

			<build>
				<plugins>

					<!-- Plugin to download binaries before assembly -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin-version}</version>
						<executions>
							<execution>
								<id>download-external-resources-osx</id>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>

								<configuration>
									<target>
										<!-- Make sure the download folder exists. -->
										<mkdir dir="${external-resources.transcode-tools.directory}/osx" />

										<!-- Download and unpack binaries -->
										<get src="${transcode-tools.download.url}/osx/${transcode-tools.macosx.filename}" dest="${external-resources.transcode-tools.directory}/${transcode-tools.macosx.filename}" usetimestamp="true" />

										<untar src="${external-resources.transcode-tools.directory}/${transcode-tools.macosx.filename}" dest="${external-resources.transcode-tools.directory}/osx" compression="gzip" stripAbsolutePathSpec="true" overwrite="true" failOnEmptyArchive="true">
										</untar>
										
										<!-- Make all downloaded binaries executable -->
										<chmod dir="${external-resources.transcode-tools.directory}/osx" perm="a+x" includes="*" excludes="libmediainfo.dylib,libjnotify.jnilib" />
										
										<!-- Copy the jnotify library file to the standard library path -->
										<copy file="${external-resources.transcode-tools.directory}/osx/libjnotify.jnilib" todir="${project.basedir}" overwrite="true" verbose="true" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!--
			Hudson (windows-jar): minimal profile that builds pms.jar with the
			Windows JNA. The POSIX JNA causes snapshot builds to crash the JVM on
			Windows, whereas the Windows JNA only disables MediaInfo for Ubuntu
			users, who can still use ffmpeg.

			Another difference from the other profiles is that we don't download the
			binaries or build the tarball.
		-->
		<profile>
			<id>windows-jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>env.HUDSON_URL</name>
				</property>
			</activation>

			<dependencies>
				<dependency>
					<groupId>net.java.dev.jna</groupId>
					<artifactId>jna</artifactId>
					<version>${jna-version-windows}</version>
				</dependency>
			</dependencies>
		</profile>

		<!-- This profile allows running PMS from inside Eclipse -->
		<profile>
			<id>run-from-eclipse</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec-maven-plugin-version}</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<classpathScope>test</classpathScope>
									<mainClass>net.pms.PMS</mainClass>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
